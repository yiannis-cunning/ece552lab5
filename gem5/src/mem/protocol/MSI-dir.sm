
machine(Directory, "Directory protocol") 
: DirectoryMemory * directory,
  MemoryControl * memBuffer,
  int directory_latency = 12,
  bool send_evictions = false 
{

  //=============================================================
  // From the Network
  // ================
  //ECE552: Incoming Messages (from the network to the directory)
  // 	    - requests to the directory (e.g., from the Cache controller of the requester's core)
  MessageBuffer requestToDir, network="From", virtual_network="2", ordered="true", vnet_type="request";
  MessageBuffer responseToDir, network="From", virtual_network="4", ordered="true", vnet_type="response";
  
  //=============================================================
  // To the Network
  // ==============
  //ECE552: Outgoing Messages (from the directory to the network)
  // 	    - forwarded requests from the directory to remote core (e.g., sharers, owner)
  //        - replies (from the directory to the requesting node)
  MessageBuffer forwardFromDir, network="To", virtual_network="3", ordered="true", vnet_type="forward";
  MessageBuffer responseFromDir, network="To", virtual_network="4", ordered="true", vnet_type="response";

  //=============================================================
  // STATES
  // ======
  //
  // ECE552: AccessPermissions specified in RubySlicc_Exports.sm
  // ECE552: Valid Data:   Read_Only, Read_Write
  // ECE552: Invalid Data: Invalid, NotPresent, Busy
  //=============================================================

  state_declaration(State, desc="Directory states", default="Directory_State_I") {

    //=====================
    //ECE552: Stable States
    //=====================

    I, AccessPermission:Invalid, desc="Not Present/Invalid";
    M, AccessPermission:Read_Write, desc="Modified";
    S, AccessPermission:Read_Only, desc="Shared between cores";

    /* ECE552: Complete this section here */

    //========================
    //ECE552: Transient States
    //========================
    MS_D, AccessPermission:Busy, desc="Waiting for data from owner core";
    IS_D, AccessPermission:Busy, desc="Waiting for data from main memory";
    IM_D, AccessPermission:Busy, desc="Waiting for data from main memory";
    SI_A, AccessPermission:Busy, desc="Waiting to write back to main memory";
    MI_A, AccessPermission:Busy, desc="Waiting to write back to main memory";

    /* ECE552: Complete this section here */
  }

  // =============================================================================
  // EVENTS
  // =============================================================================
  enumeration(Event, desc="Directory events") {

    GETM, desc="A GETM arrives";
    GETS, desc="A GETS arrives";
    PUTM, desc="A PUTM arrives";
    PUTM_Owner, desc="A PUTM arrives from Owner";
    PUTM_NotOwner, desc="A PUTM arrives";

    PUTS_NotLast, desc="A PUTS_NotLast arrives";
    PUTS_Last, desc="A PUTS_Last arrives";
    PUT_Ack, desc="Sending a PUT_Ack message";

    // Memory Controller
    Memory_Data, desc="Fetched data from memory arrives";
    Memory_Ack, desc="Writeback Ack from memory arrives";

    Data, desc="Data sent from L1 Cache";
  }

  // =============================================================================
  // STRUCTURE DEFINITIONS
  // =============================================================================

  // DirectoryEntry
  structure(Entry, desc="...", interface="AbstractEntry") {
    State DirectoryState,          desc="Directory state";
    DataBlock DataBlk,             desc="data for the block";
    NetDest Sharers,                   desc="Sharers for this block";
    NetDest Owner,                     desc="Owner of this block";
  }

  // TBE entries for DMA requests
  structure(TBE, desc="TBE entries for outstanding DMA requests") {
    Address PhysicalAddress, desc="physical address";
    State TBEState,        desc="Transient State";
    DataBlock DataBlk,     desc="Data to be written (DMA write only)";
    int Len,               desc="...";
    MachineID DmaRequestor, desc="DMA requestor";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
  }

  // =============================================================================
  // Objects (or structures)
  // =============================================================================
  TBETable TBEs, template_hack="<Directory_TBE>";

  // =============================================================================
  // PROTOTYPES
  // =============================================================================

  void set_tbe(TBE b);
  void unset_tbe();

  // =============================================================================
  // FUNCTIONS
  // =============================================================================

  Entry getDirectoryEntry(Address addr), return_by_pointer="yes" {
    Entry dir_entry := static_cast(Entry, "pointer", directory[addr]);

    if (is_valid(dir_entry)) {
      return dir_entry;
    }

    dir_entry :=  static_cast(Entry, "pointer",
                              directory.allocate(addr, new Entry));
    return dir_entry;
  }
 
  State getState(TBE tbe, Address addr) {
    if (is_valid(tbe)) {
      return tbe.TBEState;
    } else if (directory.isPresent(addr)) {
      return getDirectoryEntry(addr).DirectoryState;
    } else {
      return State:I;
    }
  }

  void setState(TBE tbe, Address addr, State state) {

    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }

    if (directory.isPresent(addr)) {

      if (state == State:M) {
        assert(getDirectoryEntry(addr).Owner.count() == 1);
        assert(getDirectoryEntry(addr).Sharers.count() == 0);
      }

      getDirectoryEntry(addr).DirectoryState := state;
    
      if (state == State:I)  {
        assert(getDirectoryEntry(addr).Owner.count() == 0);
        assert(getDirectoryEntry(addr).Sharers.count() == 0);
        directory.invalidateBlock(addr);
      }
    }
  }

  AccessPermission getAccessPermission(Address addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      return Directory_State_to_permission(tbe.TBEState);
    }

    if(directory.isPresent(addr)) {
      return Directory_State_to_permission(getDirectoryEntry(addr).DirectoryState);
    }

    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Address addr, State state) {
    if (directory.isPresent(addr)) {
      getDirectoryEntry(addr).changePermission(Directory_State_to_permission(state));
    }
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    return getDirectoryEntry(addr).DataBlk;
  }

  // ** OUT_PORTS **
  out_port(forwardNetwork_out, RequestMsg, forwardFromDir);
  out_port(responseNetwork_out, ResponseMsg, responseFromDir);
  out_port(requestQueue_out, ResponseMsg, requestToDir); // For recycling requests

//added by SS
  out_port(memQueue_out, MemoryMsg, memBuffer);
  // ** IN_PORTS **

  in_port(responseQueue_in, ResponseMsg, responseToDir) {
    if (responseQueue_in.isReady()) {
      peek(responseQueue_in, ResponseMsg) {
        TBE tbe := TBEs[in_msg.Address];
        if (in_msg.Type == CoherenceResponseType:DATA) {
	  DPRINTF(RubySlicc, "Directory - responseQueue_in port: DATA sent for address %s from machine %s\n", in_msg.Address, in_msg.Sender);
          trigger(Event:Data, in_msg.Address, tbe);
        } else {
          error("Directory: Invalid response message");
        }
      }
    }
  }

  in_port(requestQueue_in, RequestMsg, requestToDir) {
    if (requestQueue_in.isReady()) {
      peek(requestQueue_in, RequestMsg) {
        TBE tbe := TBEs[in_msg.Address];
        if (in_msg.Type == CoherenceRequestType:GETS) {
	  DPRINTF(RubySlicc, "Directory - requestQueue_in port: GETS request for address %s from machine %s\n", in_msg.Address, in_msg.Requestor);
          trigger(Event:GETS, in_msg.Address, tbe);
        } else if (in_msg.Type == CoherenceRequestType:GETM) {
	  DPRINTF(RubySlicc, "Directory - requestQueue_in port: GETM request for address %s from machine %s\n", in_msg.Address, in_msg.Requestor);
          trigger(Event:GETM, in_msg.Address, tbe);
        } else if (in_msg.Type == CoherenceRequestType:PUTM) {
          if (getDirectoryEntry(in_msg.Address).Owner.isElement(in_msg.Requestor)) {
	    DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTM for address %s from its owner machine %s\n", in_msg.Address, in_msg.Requestor);
            trigger(Event:PUTM_Owner, in_msg.Address, tbe);
          } else {
	    DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTM for address %s from  machine %s (not the owner)\n", in_msg.Address, in_msg.Requestor);
            trigger(Event:PUTM_NotOwner, in_msg.Address, tbe);
          }
        } else if (in_msg.Type == CoherenceRequestType:PUTS) {
          if ((getDirectoryEntry(in_msg.Address).Sharers.count() < 2) && (getDirectoryEntry(in_msg.Address).Sharers.isElement(in_msg.Requestor))) { //if we have one sharer or none at all (i.e., the block became modified)
	    DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTS_LAST for address %s from machine %s\n", in_msg.Address, in_msg.Requestor);
            trigger(Event:PUTS_Last, in_msg.Address, tbe);
          } else {
	    DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTS for address %s from machine %s\n", in_msg.Address, in_msg.Requestor);
            trigger(Event:PUTS_NotLast, in_msg.Address, tbe);
          }
          //} else if (getDirectoryEntry(in_msg.Address).Sharers.count() > 1) {
	  //  DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTS for address %s from machine %s\n", in_msg.Address, in_msg.Requestor);
          //  trigger(Event:PUTS_NotLast, in_msg.Address, tbe);
          //} else {
	  //  DPRINTF(RubySlicc, "Directory - requestQueue_in port: PUTS for address %s from machine %s - BUT NO sharers\n", in_msg.Address, in_msg.Requestor);
          //  error("Directory: Cannot receive a PUTS request if there are no sharers");
	  //}
        } else {
          error("Invalid message");
        }
      }
    }
  }

//added by SS
  // off-chip memory request/response is done
  in_port(memQueue_in, MemoryMsg, memBuffer) {
    if (memQueue_in.isReady()) {
      peek(memQueue_in, MemoryMsg) {
        TBE tbe := TBEs[in_msg.Address];
        if (in_msg.Type == MemoryRequestType:MEMORY_READ) {
	  DPRINTF(RRubySlicc, "Directory - memQueue_in port: MEMORY_READ for address %s from  machine %s\n", in_msg.Address, in_msg.OriginalRequestorMachId);
          trigger(Event:Memory_Data, in_msg.Address, tbe);
        } else if (in_msg.Type == MemoryRequestType:MEMORY_WB) {
	  DPRINTF(RubySlicc, "Directory - memQueue_in port: MEMORY_WB for address %s from  machine %s\n", in_msg.Address, in_msg.OriginalRequestorMachId);
          trigger(Event:Memory_Ack, in_msg.Address, tbe);
        } else {
          DPRINTF(RubySlicc,"%s\n", in_msg.Type);
          error("Invalid message");
        }
      }
    }
  }

  // =============================================================================
  // ACTIONS
  // =============================================================================

 
  action(kk_removeRequestSharer, "\k", desc="Remove Request sharer from list") {
    peek(requestQueue_in, RequestMsg) {
      DPRINTF(RubySlicc, "remove request from sharers...");
      getDirectoryEntry(address).Sharers.remove(in_msg.Requestor);
    }
  }

  //ECE552: Add Requestor to Sharers List. Just got a memory reply.
  action(ars1_addRequestorToSharers, "ars1", desc="Add Requestor to sharers list; got reply from memory") {
    peek(memQueue_in, MemoryMsg) {
      getDirectoryEntry(address).Sharers.add(in_msg.OriginalRequestorMachId);
      //out_msg.Destination.add(in_msg.OriginalRequestorMachId);
    }
  }

  //ECE552: Add Requestor to Sharers List. 
  action(ars2_addRequestorToSharers, "ars2", desc="Add Requestor to sharers list; got incoming request") {
    peek(requestQueue_in, RequestMsg) {
      getDirectoryEntry(address).Sharers.add(in_msg.Requestor);
    }
  }

  action(aos_addOwnertoSharers, "aos", desc="Add Owner to sharers list") {
    peek(requestQueue_in, RequestMsg) {
      getDirectoryEntry(address).Sharers.addNetDest((getDirectoryEntry(address).Owner));
    }
  }

  action(a_sendWriteBackAck, "a", desc="Send writeback ack to requestor; triggered from incoming request") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(forwardNetwork_out, RequestMsg, latency=directory_latency) { //Should be forward_network so it's ordered with fwd GETM reqs.
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:WB_ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
	DPRINTF(RubySlicc, "Directory - forwardNetwork_out: WB_ACK for address %s  to machine %s\n", out_msg.Address, in_msg.Requestor);
      }
    }
  }

  action(la_sendWriteBackAck, "la", desc="Send writeback ack to requestor; triggered after memory WB ack") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(forwardNetwork_out, RequestMsg, latency=directory_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:WB_ACK;
        out_msg.Requestor := in_msg.OriginalRequestorMachId;
        out_msg.Destination.add(in_msg.OriginalRequestorMachId);
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
	DPRINTF(RubySlicc, "Directory - forwardNetwork_out: WB_ACK after Memory Ack for address %s  to machine %s\n", out_msg.Address, in_msg.OriginalRequestorMachId);
      }
    }
  }

  action(c_clearOwner, "c", desc="Clear the owner field") {
    getDirectoryEntry(address).Owner.clear();
  }

  action(cs_clearSharers, "cs", desc="Clear the sharers field") {
    getDirectoryEntry(address).Sharers.clear();
  }

  action(d_sendData, "d", desc="Send data to requestor after retrieving data block from memory") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA_FROM_DIR;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.OriginalRequestorMachId);
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
	out_msg.AckCount := 0;
      }
    }
  }

  action(ds_sendSharedData, "ds", desc="Send Shared data to requestor with 0 Ack Count") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA_FROM_DIR;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DataBlk := getDirectoryEntry(address).DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
	out_msg.AckCount := 0;
	DPRINTF(RubySlicc, "Directory - responseNetwork_out: sending DATA message type for address %s  to machine %s w/ AckCount %s\n", out_msg.Address, in_msg.Requestor, out_msg.AckCount);
      }
    }
  }

  action(ds2_sendSharedData, "ds2", desc="Send Shared data to requestor with Ack Count") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA_FROM_DIR;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DataBlk := getDirectoryEntry(address).DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
	DPRINTF(RubySlicc, "Sending Shared data for address %s; sharers_count %s - sharers list %s - AckCount Bug?!\n", out_msg.Address, getDirectoryEntry(address).Sharers.count(),
getDirectoryEntry(address).Sharers);
        out_msg.AckCount := 0 - getDirectoryEntry(address).Sharers.count();
        if (getDirectoryEntry(in_msg.Address).Sharers.isElement(in_msg.Requestor)) {
           out_msg.AckCount := 1 - getDirectoryEntry(address).Sharers.count();
        }
	DPRINTF(RubySlicc, "Directory - responseNetwork_out: sending DATA message type for address %s  to machine %s w/ AckCount %s\n", out_msg.Address, in_msg.Requestor, out_msg.AckCount);
      }
    }
  }

  action(e_ownerIsRequestor, "e", desc="The owner is now the requestor") {
    peek(requestQueue_in, RequestMsg) {
      getDirectoryEntry(address).Owner.clear();
      getDirectoryEntry(address).Owner.add(in_msg.Requestor);
    }
  }

  action(f_forwardRequest, "f", desc="Forward request to owner") {
    peek(requestQueue_in, RequestMsg) {
      APPEND_TRANSITION_COMMENT("Own: ");
      APPEND_TRANSITION_COMMENT(getDirectoryEntry(in_msg.Address).Owner);
      APPEND_TRANSITION_COMMENT("Req: ");
      APPEND_TRANSITION_COMMENT(in_msg.Requestor);
      enqueue(forwardNetwork_out, RequestMsg, latency=directory_latency) {
        out_msg.Address := address;
        out_msg.Type := in_msg.Type;
        out_msg.Requestor := in_msg.Requestor;
        out_msg.Destination := getDirectoryEntry(in_msg.Address).Owner;
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
	DPRINTF(RubySlicc, "Directory - forwardNetwork_out: forwarding message type %s for address %s  from machine %s to machine %s\n", out_msg.Type, out_msg.Address, in_msg.Requestor, out_msg.Destination);
      }
    }
  }

  action(i_popIncomingRequestQueue, "i", desc="Pop incoming request queue") {
    requestQueue_in.dequeue();
  }

  action(pr_popIncomingResponseQueue, "pr", desc="Pop incoming response queue") {
    responseQueue_in.dequeue();
  }

  /* ECE552: Write data to directory */
  action(pl_writeDataToDirectory, "pl", desc="Write PUTM data to directory") {
    peek(requestQueue_in, RequestMsg) {
      getDirectoryEntry(in_msg.Address).DataBlk := in_msg.DataBlk;
    }
  }

  action(pl2_writeDataToDirectory, "pl2", desc="Write data to directory") {
    peek(responseQueue_in, ResponseMsg) {
      getDirectoryEntry(in_msg.Address).DataBlk := in_msg.DataBlk;
    }  
  }
  
  action(vv_allocateTBEFromRequestNet, "\v", desc="Allocate TBE") {
    peek(requestQueue_in, RequestMsg) {
      TBEs.allocate(address);
      set_tbe(TBEs[address]);
      tbe.DataBlk := in_msg.DataBlk;
    }
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  action(z_stall, "z", desc="stall") {
    // do nothing
  }

  action(qf_queueMemoryFetchRequest, "qf", desc="Queue off-chip fetch request") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_READ;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := in_msg.Requestor;
        out_msg.MessageSize := in_msg.MessageSize;
        out_msg.DataBlk := getDirectoryEntry(in_msg.Address).DataBlk;
	DPRINTF(RubySlicc, "Directory - memQueue_out: send MEMORY_READ request for address %s triggered from machine %s\n", out_msg.Address, machineID);
      }
    }
  }

  action(qwt_queueMemoryWBRequest_partialTBE, "qwt", desc="Queue off-chip writeback request") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency="1") {
        assert(is_valid(tbe));
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.OriginalRequestorMachId := in_msg.Requestor;
        out_msg.DataBlk.copyPartial(tbe.DataBlk, addressOffset(tbe.PhysicalAddress), tbe.Len);
        out_msg.MessageSize := in_msg.MessageSize;
	DPRINTF(RubySlicc, "Directory - memQueue_out: send partial MEMORY_WB request for address %s triggered from machine %s\n", out_msg.Address, in_msg.Requestor);
      }
    }
  }

  action(lq_queueMemoryWBRequest, "lq", desc="Write PUTM data to memory from requestQueue") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := in_msg.Requestor;
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.MessageSize := in_msg.MessageSize;
	DPRINTF(RubySlicc, "Directory - memQueue_out: send MEMORY_WB request for address %s triggered from machine %s\n", out_msg.Address, in_msg.Requestor);
      }
    }
  }

  action(lq2_queueMemoryWBRequest, "lqi", desc="Write data to memory from responseQueue") {
    peek(responseQueue_in, ResponseMsg) {
      enqueue(memQueue_out, MemoryMsg, latency="1") {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := in_msg.Sender;
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.MessageSize := in_msg.MessageSize;
	DPRINTF(RubySlicc, "Directory - memQueue_out: send MEMORY_WB request for address %s triggered from machine %s\n", out_msg.Address, in_msg.Sender);
      }
    }
  }

  action(qm_popMemQueue, "qm", desc="Pop off-chip request queue") {
    DPRINTF(RubySlicc, "Directory - Popping Request from memQueue\n");
    memQueue_in.dequeue();
  }

  action(w_writeDataToMemoryFromTBE, "\w", desc="Write date to directory memory from TBE") {
    assert(is_valid(tbe));
    getDirectoryEntry(address).DataBlk.copyPartial(tbe.DataBlk, 
                                addressOffset(tbe.PhysicalAddress), 
                                tbe.Len);

  }

  action(fwm_sendFwdInvToSharersMinusRequestor, "fwm", desc="invalidate sharers for request") {
    peek(requestQueue_in, RequestMsg) {
      enqueue(forwardNetwork_out, RequestMsg, latency=directory_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:INV;
        out_msg.Requestor := in_msg.Requestor;
        out_msg.Destination := getDirectoryEntry(address).Sharers;
        if (getDirectoryEntry(in_msg.Address).Sharers.isElement(in_msg.Requestor)) { 
           out_msg.Destination.remove(in_msg.Requestor); 
        }
        out_msg.MessageSize := MessageSizeType:Request_Control;
	DPRINTF(RubySlicc, "Directory - forwardNetwork_out: send INV request for address %s to Sharers %s triggered from machine %s Destinatation Cnt %s\n", out_msg.Address, out_msg.Destination, in_msg.Requestor, out_msg.Destination.count());
      }
    }
  }


  // =============================================================================
  // TRANSITIONS
  // =============================================================================

  /* ECE552: Complete this section here */

  // --------------------------- Steady state --------------------------- // 
  /* ---- Invalid block (I) ---- */ 
  transition(I, {GETS}, IS_D){
    ars1_addRequestorToSharers;     // 1) Add the requestor to be a sharer
    vv_allocateTBEFromRequestNet;   // 2) Allocate a TBE
    qf_queueMemoryFetchRequest;     // 3) Get the data from memory
    i_popIncomingRequestQueue;      // 4) Done with this request -> Data will be forwarded when it gets here
  }
  transition(I, {GETM}, IM_D){
    e_ownerIsRequestor;             // 1) Add the requestor to be a owner
    vv_allocateTBEFromRequestNet;   // 2) Allocate a TBE
    qf_queueMemoryFetchRequest;     // 3) Get the data from memory
    i_popIncomingRequestQueue;      // 4) Done with this request -> Data will be forwarded when it gets here
  }
  transition(I, {PUTS_NotLast, PUTS_Last, PUTM_NotOwner}, I){
    a_sendWriteBackAck;             // 1) Block is already invalid ?
    i_popIncomingRequestQueue;      // 2) Done with this request
  }
  

  // --------------------------- Transient states --------------------------- //
  /* ---- IS_D ---- */
  transition(IS_D, {GETM, GETS}, IS_D){
    z_stall;                      // 1) Wait until you get the data before servicing
  }

  transition(IS_D, {Memory_Data}, S){
    d_sendData;                   // 1) Send the data that was recived from mem
    w_deallocateTBE;              // 2) Going to steady state
    qm_popMemQueue;               // 3) Done with this request
  }

  /* ---- IM_D ---- */
  transition(IM_D, {GETM, GETS,}, IM_D){
    z_stall;                      // 1) Wait until you get the data before servicing
  }

  transition(IM_D, {Memory_Data}, M){
    d_sendData;                   // 1) Send the data that was recived from mem
    w_deallocateTBE;              // 2) Going to steady state
    qm_popMemQueue;               // 3) Done with this request
  }








  // --------------------------- Steady state --------------------------- // 
  /* ---- Shared block (S) ---- */ 
  transition(S, {GETS}, S){
    ars2_addRequestorToSharers;   // 1) Add the requestor to the sharers list
    ds_sendSharedData;            // 2) Send back shared data
    i_popIncomingRequestQueue;    // 3) Done with this request
  }
  transition(S, {PUTS_NotLast}, S){
    kk_removeRequestSharer;       // 1) Remove the requestor from shared list
    a_sendWriteBackAck;           // 2) Send a put ack
    i_popIncomingRequestQueue;    // 3) Done with this request
  }
  transition(S, {PUTS_Last}, SI_A){
    vv_allocateTBEFromRequestNet; // 1) Allocate TBE for this request
    kk_removeRequestSharer;       // 2) Remove the requestor from shared list
    lq_queueMemoryWBRequest;      // 3) Writeback to main memory
    i_popIncomingRequestQueue;    // 3) Done with this request - will send the ack when the ack comes from mem
  }
  transition(S, {PUTM_NotOwner}, S){
    kk_removeRequestSharer;       // 1) Remove the requestor from shared list
    a_sendWriteBackAck;           // 2) Send a put ack
    i_popIncomingRequestQueue;    // 3) Done with this request
  }
  transition(S, {GETM}, M){
    ds2_sendSharedData;           // 1) Send back requestor data + ackcount
    cs_clearSharers;              // 2) No more sharers for modified block
    e_ownerIsRequestor;           // 3) Set the requestor as the new owner
    fwm_sendFwdInvToSharersMinusRequestor;    // 4) Request all other cores to invalidate
    i_popIncomingRequestQueue;    // 4) Done with this request
  }



  // --------------------------- Transient states --------------------------- //
  /* ---- SI_A ---- */
  transition(SI_A, {GETM, GETS}, SI_A){
    z_stall;                    // 1) Wait until this transition is done
  }
  transition(SI_A, {Memory_Ack}, I){
    la_sendWriteBackAck;        // 1) Send WB ack to the requestor
    w_deallocateTBE;            // 2) Done with this transition
    qm_popMemQueue;             // 3) Done with this request
  }








  // --------------------------- Steady state --------------------------- // 
  /* ---- Modified block (M) ---- */ 
  transition(M, {PUTS_Last, PUTS_NotLast, PUTM_NotOwner} , M){
    a_sendWriteBackAck;           // 1) Send a put ack
    i_popIncomingRequestQueue;    // 2) Done with this request
    // Out of date requests?
  }
  
  transition(M, GETS, MS_D){
    f_forwardRequest;              // 1) Forward the getS request to the owner
    ars2_addRequestorToSharers;    // 2) Add the incomming reqestor to the shared list
    aos_addOwnertoSharers;         // 3) Add the owner to the sharing list
    c_clearOwner;                  // 4) Get rid of the old owner as a owner - add them on share list??
    i_popIncomingRequestQueue;     // 5) Done with this request
  }

  transition(M, GETM, M){
    f_forwardRequest;              // 1) Fwd getm to the owner
    e_ownerIsRequestor;            // 2) Requestor is new owner 
    i_popIncomingRequestQueue;     // 3) Done with this request
  }

  transition(M, PUTM_Owner, MI_A){
    vv_allocateTBEFromRequestNet;  // 1) Allocate a TBE
    pl_writeDataToDirectory;       // 2) Save incomming data to dir
    lq_queueMemoryWBRequest;       // 4) Send the data to the memory
    i_popIncomingRequestQueue;     // 5) Done with this request
  }



  /* ---- MS_D ---- */
  transition(MS_D, {GETM, GETS}, MS_D){
    z_stall;                        // 1) Wait until stable state until response
  }

  transition(MS_D, {PUTS_NotLast, PUTS_Last, PUTM_NotOwner}, MS_D){
    kk_removeRequestSharer        // 1) Remove the requestor from the share list 
    a_sendWriteBackAck;           // 2) Send a put ack
    i_popIncomingRequestQueue;    // 3) Done with this request
  }

  transition(MS_D, {Data}, S){
    pl2_writeDataToDirectory;     // 1) Save the data from the owner
    ds_sendSharedData;            // 2) Forward the shared data - maybe dont need this??
    pr_popIncomingResponseQueue;  // 3) Done with this request 
  }

  /* ---- MI_A ---- */
  transition(MI_A, {GETM, GETS}, MI_A){
    z_stall;
  }
  transition(MI_A, {Memory_Ack}, I){
    c_clearOwner;                  // 1) Clear all owners
    cs_clearSharers;               // 2) Clear all shares - not rly nessaasry
    la_sendWriteBackAck;           // 3) Send writback ack to original requestor
    w_deallocateTBE;               // 4) Deallocate TBE
    qm_popMemQueue;                // 5) Done with this request
  }

}




